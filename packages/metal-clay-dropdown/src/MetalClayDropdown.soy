{namespace MetalClayDropdown}

/**
 * This renders a Metal Clay Dropdown component.
 */
{template .render}
	{@param? alignedPosition: int}
	{@param? alignElementSelector: string}
	{@param? body: html}
	{@param? classMap: ?}
	{@param? dropdownContainerElement: string}
	{@param? dropdownItems: list<[
		component: string,
		elementClasses: string,
		href: string,
		label: string
	]>}
	{@param? dropdownOpenClass: string}
	{@param? dropdownToggle: [
		elementClasses: string,
		href: string,
		icon: [
			alignment: string,
			spritemap: string,
			symbol: string
		],
		label: string
	]}
	{@param? expanded: bool}
	{@param? header: html}
	{@param? position: int}
	{@param? renderDropdownMenu: bool}

	{let $classes: $classMap ? $classMap : ['dropdown', 'dropdown', 'dropdown', 'dropdown', 'dropdown', 'dropdown', 'dropdown', 'dropdown'] /}
	{let $currentPosition: $alignedPosition ?: $position /}
	{let $positionClass: isNonnull($currentPosition) ? $classes[$currentPosition] : 'dropdown' /}

	{let $elementClasses kind="text"}
		{$positionClass}
		{if $expanded}
			{sp}{$dropdownOpenClass ?: 'show'}
		{/if}
		{if $alignElementSelector}
			{sp}relative-target
		{/if}
	{/let}

	{call .containerTag}
		{param classes: $elementClasses /}
		{param containerElement: $dropdownContainerElement /}
		{param content kind="html"}
			{if not $alignElementSelector}
				{call .dropdownToggle}
					{param alignElementSelector: $alignElementSelector /}
					{param dropdownToggle: $dropdownToggle /}
					{param header: $header /}
				{/call}
			{/if}

			{if $renderDropdownMenu}
				{call .dropdownItems}
					{param body: $body /}
					{param dropdownItems: $dropdownItems /}
				{/call}
			{/if}
		{/param}
	{/call}
{/template}

/**
 * This renders a container's html tag.
 */
{template .containerTag}
	{@param content: html}
	{@param? classes: string}
	{@param? containerElement: string}

	{switch $containerElement}
		{case 'li'}
			<li class="{$classes}">
				{$content}
			</li>
		{default}
			<div class="{$classes}">
				{$content}
			</div>
	{/switch}
{/template}

/**
 * This renders the dropdown toggle.
 */
{template .dropdownToggle}
	{@param? dropdownToggle: [
		elementClasses: string,
		href: string,
		icon: [
			alignment: string,
			spritemap: string,
			symbol: string
		],
		label: string
	]}
	{@param? header: html}

	{if $header}
		{$header}
	{elseif $dropdownToggle}
		{if $dropdownToggle.href}
			<a class="{$dropdownToggle.elementClasses}" data-onclick="toggle" href="{$dropdownToggle.href}" ref="toggler">
				{call .dropdownToggleContent}
					{param dropdownToggle: $dropdownToggle /}
				{/call}
			</a>
		{else}
			<button class="{$dropdownToggle.elementClasses}" data-onclick="toggle" ref="toggler">
				{call .dropdownToggleContent}
					{param dropdownToggle: $dropdownToggle /}
				{/call}
			</button>
		{/if}
	{/if}
{/template}

/**
 * This renders the dropdown menu items.
 */
{template .dropdownItems}
	{@param? body: html}
	{@param? dropdownItems: list<[
		component: string,
		elementClasses: string,
		href: string,
		label: string
	]>}

	{if $body}
		{$body}
	{elseif $dropdownItems}
		<div class="dropdown-menu" ref="dropdownmenu">
			{foreach $item in $dropdownItems}
				{let $elementClasses kind="text"}
					{if $item.elementClasses}
						{sp}{$item.elementClasses}
					{/if}
				{/let}

				{switch $item.component}
					{case 'header'}
						<h6 class="dropdown-header{$elementClasses}">
							{$item.label ?: ''}
						</h6>
					{case 'divider'}
						<div class="dropdown-divider{$elementClasses}"></div>
					{default}
						{if $item.href}
							<a class="dropdown-item{$elementClasses}" ref="el-{index($item)}" href="{$item.href}">
								{$item.label ?: ''}
							</a>
						{else}
							<button class="dropdown-item{$elementClasses}" ref="el-{index($item)}">
								{$item.label ?: ''}
							</button>
						{/if}
				{/switch}
			{/foreach}
		</div>
	{/if}
{/template}

/**
 * This renders the dropdown menu items.
 */
{template .dropdownToggleContent}
	{@param? dropdownToggle: [
		elementClasses: string,
		href: string,
		icon: [
			alignment: string,
			spritemap: string,
			symbol: string
		],
		label: string
	]}

	{if $dropdownToggle.icon and $dropdownToggle.icon.alignment == 'left'}
		{call MetalClayIcon.render}
			{param spritemap: $dropdownToggle.icon.spritemap /}
			{param symbol: $dropdownToggle.icon.symbol /}
		{/call}
		{$dropdownToggle.label ?: ''}
	{elseif $dropdownToggle.icon}
		{$dropdownToggle.label ?: ''}
		{call MetalClayIcon.render}
			{param spritemap: $dropdownToggle.icon.spritemap /}
			{param symbol: $dropdownToggle.icon.symbol /}
		{/call}
	{else}
		{$dropdownToggle.label ?: ''}
	{/if}
{/template}